// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/zjzjzjzj1874/best-pracrice-go-zero/__test__/gorm/dal/model"
)

func newTScanaContent(db *gorm.DB) tScanaContent {
	_tScanaContent := tScanaContent{}

	_tScanaContent.tScanaContentDo.UseDB(db)
	_tScanaContent.tScanaContentDo.UseModel(&model.TScanaContent{})

	tableName := _tScanaContent.tScanaContentDo.TableName()
	_tScanaContent.ALL = field.NewField(tableName, "*")
	_tScanaContent.ID = field.NewInt32(tableName, "id")
	_tScanaContent.BatchID = field.NewString(tableName, "batch_id")
	_tScanaContent.UpdateTime = field.NewTime(tableName, "update_time")
	_tScanaContent.FirstAuditReceiveTime = field.NewTime(tableName, "first_audit_receive_time")
	_tScanaContent.FirstAuditTime = field.NewTime(tableName, "first_audit_time")
	_tScanaContent.InTime = field.NewTime(tableName, "in_time")
	_tScanaContent.FinalResultTime = field.NewTime(tableName, "final_result_time")
	_tScanaContent.RecheckAuditReceiveTime = field.NewTime(tableName, "recheck_audit_receive_time")
	_tScanaContent.TimeoutDuration = field.NewTime(tableName, "timeout_duration")
	_tScanaContent.CallbackTime = field.NewTime(tableName, "callback_time")

	_tScanaContent.fillFieldMap()

	return _tScanaContent
}

type tScanaContent struct {
	tScanaContentDo tScanaContentDo

	ALL                     field.Field
	ID                      field.Int32
	BatchID                 field.String
	UpdateTime              field.Time
	FirstAuditReceiveTime   field.Time
	FirstAuditTime          field.Time
	InTime                  field.Time
	FinalResultTime         field.Time
	RecheckAuditReceiveTime field.Time
	TimeoutDuration         field.Time
	CallbackTime            field.Time

	fieldMap map[string]field.Expr
}

func (t tScanaContent) Table(newTableName string) *tScanaContent {
	t.tScanaContentDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tScanaContent) As(alias string) *tScanaContent {
	t.tScanaContentDo.DO = *(t.tScanaContentDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tScanaContent) updateTableName(table string) *tScanaContent {
	t.ALL = field.NewField(table, "*")
	t.ID = field.NewInt32(table, "id")
	t.BatchID = field.NewString(table, "batch_id")
	t.UpdateTime = field.NewTime(table, "update_time")
	t.FirstAuditReceiveTime = field.NewTime(table, "first_audit_receive_time")
	t.FirstAuditTime = field.NewTime(table, "first_audit_time")
	t.InTime = field.NewTime(table, "in_time")
	t.FinalResultTime = field.NewTime(table, "final_result_time")
	t.RecheckAuditReceiveTime = field.NewTime(table, "recheck_audit_receive_time")
	t.TimeoutDuration = field.NewTime(table, "timeout_duration")
	t.CallbackTime = field.NewTime(table, "callback_time")

	t.fillFieldMap()

	return t
}

func (t *tScanaContent) WithContext(ctx context.Context) *tScanaContentDo {
	return t.tScanaContentDo.WithContext(ctx)
}

func (t tScanaContent) TableName() string { return t.tScanaContentDo.TableName() }

func (t tScanaContent) Alias() string { return t.tScanaContentDo.Alias() }

func (t *tScanaContent) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tScanaContent) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 10)
	t.fieldMap["id"] = t.ID
	t.fieldMap["batch_id"] = t.BatchID
	t.fieldMap["update_time"] = t.UpdateTime
	t.fieldMap["first_audit_receive_time"] = t.FirstAuditReceiveTime
	t.fieldMap["first_audit_time"] = t.FirstAuditTime
	t.fieldMap["in_time"] = t.InTime
	t.fieldMap["final_result_time"] = t.FinalResultTime
	t.fieldMap["recheck_audit_receive_time"] = t.RecheckAuditReceiveTime
	t.fieldMap["timeout_duration"] = t.TimeoutDuration
	t.fieldMap["callback_time"] = t.CallbackTime
}

func (t tScanaContent) clone(db *gorm.DB) tScanaContent {
	t.tScanaContentDo.ReplaceDB(db)
	return t
}

type tScanaContentDo struct{ gen.DO }

func (t tScanaContentDo) Debug() *tScanaContentDo {
	return t.withDO(t.DO.Debug())
}

func (t tScanaContentDo) WithContext(ctx context.Context) *tScanaContentDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tScanaContentDo) ReadDB() *tScanaContentDo {
	return t.Clauses(dbresolver.Read)
}

func (t tScanaContentDo) WriteDB() *tScanaContentDo {
	return t.Clauses(dbresolver.Write)
}

func (t tScanaContentDo) Clauses(conds ...clause.Expression) *tScanaContentDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tScanaContentDo) Returning(value interface{}, columns ...string) *tScanaContentDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tScanaContentDo) Not(conds ...gen.Condition) *tScanaContentDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tScanaContentDo) Or(conds ...gen.Condition) *tScanaContentDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tScanaContentDo) Select(conds ...field.Expr) *tScanaContentDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tScanaContentDo) Where(conds ...gen.Condition) *tScanaContentDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tScanaContentDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tScanaContentDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tScanaContentDo) Order(conds ...field.Expr) *tScanaContentDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tScanaContentDo) Distinct(cols ...field.Expr) *tScanaContentDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tScanaContentDo) Omit(cols ...field.Expr) *tScanaContentDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tScanaContentDo) Join(table schema.Tabler, on ...field.Expr) *tScanaContentDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tScanaContentDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tScanaContentDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tScanaContentDo) RightJoin(table schema.Tabler, on ...field.Expr) *tScanaContentDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tScanaContentDo) Group(cols ...field.Expr) *tScanaContentDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tScanaContentDo) Having(conds ...gen.Condition) *tScanaContentDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tScanaContentDo) Limit(limit int) *tScanaContentDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tScanaContentDo) Offset(offset int) *tScanaContentDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tScanaContentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tScanaContentDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tScanaContentDo) Unscoped() *tScanaContentDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tScanaContentDo) Create(values ...*model.TScanaContent) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tScanaContentDo) CreateInBatches(values []*model.TScanaContent, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tScanaContentDo) Save(values ...*model.TScanaContent) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tScanaContentDo) First() (*model.TScanaContent, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TScanaContent), nil
	}
}

func (t tScanaContentDo) Take() (*model.TScanaContent, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TScanaContent), nil
	}
}

func (t tScanaContentDo) Last() (*model.TScanaContent, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TScanaContent), nil
	}
}

func (t tScanaContentDo) Find() ([]*model.TScanaContent, error) {
	result, err := t.DO.Find()
	return result.([]*model.TScanaContent), err
}

func (t tScanaContentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TScanaContent, err error) {
	buf := make([]*model.TScanaContent, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tScanaContentDo) FindInBatches(result *[]*model.TScanaContent, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tScanaContentDo) Attrs(attrs ...field.AssignExpr) *tScanaContentDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tScanaContentDo) Assign(attrs ...field.AssignExpr) *tScanaContentDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tScanaContentDo) Joins(fields ...field.RelationField) *tScanaContentDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tScanaContentDo) Preload(fields ...field.RelationField) *tScanaContentDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tScanaContentDo) FirstOrInit() (*model.TScanaContent, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TScanaContent), nil
	}
}

func (t tScanaContentDo) FirstOrCreate() (*model.TScanaContent, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TScanaContent), nil
	}
}

func (t tScanaContentDo) FindByPage(offset int, limit int) (result []*model.TScanaContent, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tScanaContentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tScanaContentDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t *tScanaContentDo) withDO(do gen.Dao) *tScanaContentDo {
	t.DO = *do.(*gen.DO)
	return t
}
